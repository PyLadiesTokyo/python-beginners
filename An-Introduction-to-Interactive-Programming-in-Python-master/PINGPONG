# Implementation of classic arcade game Pong
import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction = 0):
    global ball_pos, ball_vel  # these are vectors stored as lists
    global color1, color2
    ball_vel = [0,0]
    ball_pos = [WIDTH/2,HEIGHT/2]
    if direction is RIGHT:
        ball_vel[0] =  1*float(random.randrange(120, 240))/60
    else:    
        ball_vel[0] = -1*float(random.randrange(120, 240))/60
    ball_vel[1] = -float(random.randrange(60, 180))/60
 
     
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints 
    paddle1_pos = [0,HEIGHT/2-HALF_PAD_HEIGHT]
    paddle2_pos = [WIDTH-1,HEIGHT/2-HALF_PAD_HEIGHT]
    paddle1_vel = [0,0]
    paddle2_vel = [0,0]
    score1 = 0
    score2 = 0
    spawn_ball(False)
 
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    global color1, color2     
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")

    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    # collide and reflect off of left hand side of canvas
    if ball_pos[0] <= (BALL_RADIUS+PAD_WIDTH):
        ball_vel[0] = - ball_vel[0]
        if ((paddle1_pos[1] <= ball_pos[1]) and (paddle1_pos[1]+PAD_HEIGHT >= ball_pos[1])):
          ball_vel[0] = (ball_vel[0]+ball_vel[0]*.10)
          ball_vel[1] = (ball_vel[1]+ball_vel[0]*.10)
        else:
          spawn_ball(RIGHT)
          score2 +=1
 
    # collide and reflect off of right hand side of canvas
    if ball_pos[0] >= (WIDTH -1-BALL_RADIUS-PAD_WIDTH):
        ball_vel[0] = - ball_vel[0]
        if ((paddle2_pos[1] <= ball_pos[1]) and (paddle2_pos[1]+PAD_HEIGHT >= ball_pos[1])):
         ball_vel[0] = (ball_vel[0]+ball_vel[0]*.10)
         ball_vel[1] = (ball_vel[1]+ball_vel[0]*.10)
        else:
         spawn_ball(LEFT)
         score1 +=1
 
    # top
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
   
    # bottom
    if ball_pos[1] >= (HEIGHT -1-BALL_RADIUS) :
        ball_vel[1] = - ball_vel[1]
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    
    paddle1_pos[1] += paddle1_vel[1]
    paddle2_pos[1] += paddle2_vel[1]
    
    if paddle1_pos[1] <=0:
        paddle1_vel[1] = 0

    if paddle1_pos[1] >= HEIGHT - PAD_HEIGHT:
        paddle1_vel[1] = 0

    if paddle2_pos[1] <=0:
        paddle2_vel[1] = 0

    if paddle2_pos[1] >= HEIGHT - PAD_HEIGHT:
        paddle2_vel[1] = 0
        
    # draw paddles
    canvas.draw_line(paddle1_pos,[paddle1_pos[0],paddle1_pos[1]+PAD_HEIGHT],PAD_WIDTH,'White')
    canvas.draw_line(paddle2_pos,[paddle2_pos[0],paddle2_pos[1]+PAD_HEIGHT],PAD_WIDTH,'White')
    # draw scores
    canvas.draw_text(''+str(score1), ((WIDTH*1/4), HEIGHT/4), 40, 'White')
    canvas.draw_text(''+str(score2), ((WIDTH*3/4), HEIGHT/4), 40, 'White')

     
def button_handler():
    new_game()
    
def keydown(key):
    global paddle1_vel, paddle2_vel, STOP_PADDLE1, STOP_PADDLE2   
    vel = 2
    if key == simplegui.KEY_MAP['w']:
       paddle1_vel[1] += -vel
    elif key == simplegui.KEY_MAP['s']:
       paddle1_vel[1] += vel
    elif key == simplegui.KEY_MAP['up']:
       paddle2_vel[1] += -vel
    elif key == simplegui.KEY_MAP['down']:
       paddle2_vel[1] += vel
    
def keyup(key):
    global paddle1_vel, paddle2_vel, STOP_PADDLE1, STOP_PADDLE2   
    if key == simplegui.KEY_MAP['w']:
       paddle1_vel[1] = 0
    elif key == simplegui.KEY_MAP['s']:
       paddle1_vel[1] = 0
    elif key == simplegui.KEY_MAP['up']:
       paddle2_vel[1] = 0
    elif key == simplegui.KEY_MAP['down']:
       paddle2_vel[1] = 0
               
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
restart = frame.add_button('Restart', button_handler)

# start frame
new_game()
frame.start()

